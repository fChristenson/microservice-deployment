apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      nodePort: 30000
      targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: users
spec:
  selector:
    app: users
  ports:
    - port: 80
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: books
spec:
  selector:
    app: books
  ports:
    - port: 80
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 80
          volumeMounts:
            - name: configs
              mountPath: /etc/nginx/
      volumes:
        - name: configs
          configMap:
            name: nginx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users
  template:
    metadata:
      labels:
        app: users
    spec:
      containers:
        - name: users
          image: foobar
          imagePullPolicy: Never
          command:
            - "npm"
            - "run"
            - "start:users"
          resources:
            limits:
              memory: "100Mi"
              cpu: "100m"
          ports:
            - containerPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: books
spec:
  replicas: 1
  selector:
    matchLabels:
      app: books
  template:
    metadata:
      labels:
        app: books
    spec:
      containers:
        - name: books
          image: foobar
          imagePullPolicy: Never
          command:
            - "npm"
            - "run"
            - "start:books"
          resources:
            limits:
              memory: "100Mi"
              cpu: "100m"
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |-
    events {}

    http {
        resolver kube-dns.kube-system;
        server {

        # Our web application
        location / {
          return 200 "welcome";
        }
      
        # Our api made from MicroServices
        location ~^/api/v1/books(.*)$ {
          proxy_pass http://books.default.svc.cluster.local/api/v1/books$1;
        }
      
        location ~^/api/v1/users(.*)$ {
          proxy_pass http://users.default.svc.cluster.local/api/v1/users$1;
        }
      }
    }
